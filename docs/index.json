[
{
	"uri": "/stegos-docs-hugo/about/",
	"title": "ABOUT",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/stegos-docs-hugo/getting-started/",
	"title": "GETTING STARTED",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/stegos-docs-hugo/for-developers/",
	"title": "FOR DEVELOPERS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/stegos-docs-hugo/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/stegos-docs-hugo/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Stegos    "
},
{
	"uri": "/stegos-docs-hugo/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Welcome to Stegos Documentation portal! We live in an era of unprecedented state surveillance and crackdowns on freedom.\nIt’s nobody’s business what you do with your money, whether paper or digital, and it’s nobody\u0026rsquo;s business who you transact or communicate with.\nStegos helps you embrace your freedoms by providing the first cryptocurrency with fully private transactions and integrated private messaging. This is all thanks to Snowball, our unique privacy protocol. Pruning and sharding keeping the blockchain fast and small.\nStegos uses gamified proof-of-stake (gPoS) to ensure that everyone who helps maintain the network has a fair chance of earning Stegos tokens, not just whales.\n"
},
{
	"uri": "/stegos-docs-hugo/for-developers/building_from_source/",
	"title": "Building from Source",
	"tags": [],
	"description": "",
	"content": " Building on Linux and Mac Requirements  Stegos requires Rust 1.38.0-nightly (d3f8a0b5d 2019-08-04) to build. The recommended way to install Rust it to use rustup. If you don\u0026rsquo;t already have rustup, you can install it like this: curl https://sh.rustup.rs -sSf | sh Make sure that these binaries are in your PATH. After that, you should be able to build Stegos from the source. Use nightly-2019-08-04 toolchain when asked. libflint and libgmp - we expect libflint.a and libgmp.a static libraries and headers installed in /usr/local. Binaries for Linux and MacOS can be grabbed at https://github.com/stegos/stegos-external-libs/releases.  Building Run cargo build to create the main executable:\n1# build in release mode 2$ cargo build --release This produces stegos and stegosd executable in the ./target/release subdirectory.\n"
},
{
	"uri": "/stegos-docs-hugo/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/stegos-docs-hugo/getting-started/connection_to_a_node/",
	"title": "Connecting to a Node",
	"tags": [],
	"description": "",
	"content": " In this section we explain how to connect to a Stegos Node.\nPrerequisites:\n Node is up and running  Connecting to a Local Node  ./stegos  ./stegos\n docker exec -t -i \u0026lt;CONTAINER_NAME\u0026gt; stegos\n\n  The command-line client will try to connect to a local node and print stegos prompt on success:\n1Stegos CLI 0.11.13 (e63fb9e 2019-08-09) 2Type \u0026#39;help\u0026#39; to get help 3 4account#1\u0026gt; Type help to get help:\n1stegos\u0026gt; help 2Usage: 3show accounts - show available accounts 4use ACCOUNT_ID - switch to a account 5create account - add a new account 6recover account - recover account from 24-word recovery phrase 7delete account - delete active account 8passwd - change account\u0026#39;s password 9lock - lock the account 10unlock - unlock the account 11 12pay ADDRESS AMOUNT [COMMENT] [/snowball] [/public] [/lock DATETIME] [/fee FEE] [/certificate] - send money 13validate certificate UTXO SENDER_ADDRESS RECIPIENT_ADDRESS RVALUE - check that payment certificate is valid 14msg ADDRESS MESSAGE - send a message via blockchain 15stake AMOUNT - stake money 16unstake [AMOUNT] - unstake money 17restake - restake all available stakes 18cloak - exchange all available public outputs 19show version - print version information 20show keys - print keys 21show balance - print balance 22show utxo - print unspent outputs 23show history [STARTING DATE] - print history since date 24show election - print leader election state 25show escrow - print escrow 26show recovery - print recovery information You successfully connected to a local Node.\n\nConnecting to a Remote Node Copy api.token from a remote hos"
},
{
	"uri": "/stegos-docs-hugo/for-developers/data_directory_layout/",
	"title": "Data Directory Layout",
	"tags": [],
	"description": "",
	"content": "Data directory has the following layout:\n1 ├── accounts/ \u0026lt;!-- Accounts 2 │ ├── 1 3 │ │ ├── account.pkey \u0026lt;!-- Account #1 public key (address) 4 │ │ ├── account.skey \u0026lt;!-- Account #2 secret key (address) 5 │ │ └── history/ \u0026lt;!-- Payment History (RocksDB) 6 │ └── 2 7 │ ├── account.pkey \u0026lt;!-- Account #1 public key (address) 8 │ ├── account.skey \u0026lt;!-- Account #2 secret key (address) 9 │ └── history/ \u0026lt;!-- Payment History (RocksDB) 10 ├── api.token \u0026lt;!-- Generated API Token 11 ├── chain/ \u0026lt;!-- Blockchain (RocksDB) 12 ├── network.pkey \u0026lt;!-- Ephemeral network (consensus) public key. 13 ├── network.skey \u0026lt;!-- Ephemeral network (consensus) secret key. "
},
{
	"uri": "/stegos-docs-hugo/about/funding_and_development/",
	"title": "Funding and Development",
	"tags": [],
	"description": "",
	"content": " How is Stegos being funded? Stegos will generate a pre-mine of 1 billion STG tokens. Up to 51.25% of the STG pre-mine may be privately sold to high net-worth individuals and companies to reach a maximum of $30 million. Stegos has already raised $15 million of this target in 2018. Once the mainnet is launched, STG tokens will be sold directly to the general public using the built-in DEX.\nHas development started? Development has been on-going for many months. The testnet launched has already launched, and mainnet is due to launch on May 31st.\nWhen does the mainnet launch? Mainnet will launch on May 31st\nWhat features will be available at mainnet launch? Most features will be implemented at launch, although full mobile support will come later. The app will not be available at launch, so there will be no UI available for non-payment transactions such as messages. However, transaction pruning will be implemented at launch, so it will still be possible to use these features manually.\nIs there a way to help with testing? Yes! The Stegos testnet is currently running and we welcome all testers and feedback. To get started, go to https://github.com/stegos/stegos/releases.\n"
},
{
	"uri": "/stegos-docs-hugo/getting-started/installing_a_node/",
	"title": "Installing a node",
	"tags": [],
	"description": "",
	"content": " In this section we explain how to install Stegos Node (stegosd) and Stegos Command-Line Client (stegos) on your server.\nPrerequisites:\n Linux host (any distro) OR macOS host OR Docker-enabled host.  This instruction is about running Stegos Node server using command-line interface. If you need a desktop application, please see \u0026ldquo;Installing a Desktop App\u0026rdquo;.\n Installing on Linux For production purposes, we recommend official binaries from GitHub Release page. These binaries have been tested on 64-bit versions of Ubuntu 18.04 \u0026ldquo;Bionic\u0026rdquo;, Debian 11 \u0026ldquo;Stretch\u0026rdquo; and Fedora 30. Other Linux distros should work as well.\nUsing Pre-built Binaries Download the latest version of stegosd and stegos binaries from GitHub Releases 1curl -L https://github.com/stegos/stegos/releases/download/v0.12/stegosd-linux-x64 -o stegosd 2curl -L https://github.com/stegos/stegos/releases/download/v0.12/stegos-linux-x64 -o stegos 3chmod a+x stegosd ste 4gos 5./stegosd --version 6./stegos --version\nThe script above will download stegosd (Node) and stegos (CLI) binaries from GitHub Releases, change file permissions to \u0026ldquo;Executable\u0026rdquo; and print Node\u0026rsquo;s version:\n1yourname@linux:~$ curl -L https://github.com/stegos/stegos/releases/download/v0.12/stegosd-linux-x64 -o stegosd 2 % Total % Received % Xferd Average Speed Time Time Time Current 3 Dload Upload Total Spent Left Speed 4100 608 0 608 0 0 1859 0 --:--:-- --:--:-- --:--:-- 1859 5100 22.0M 100 22.0M 0 0 5996k 0 0:00:03 0:00:03 --:--:-- 7197k 6you@linux:~$ curl -L https://github.com/stegos/stegos/releases/download/v0.12/stegos-linux-x64 -o stegos 7 % Total % Received % Xferd Average Speed Time Time Time Current 8 Dload Upload Total Spent Left Speed 9100 607 0 607 0 0 1833 0 --:--:-- --:--:-- --:--:-- 1833 10100 6022k 100 6022k 0 0 3033k 0 0:00:01 0:00:01 --:--:-- 5435k 11yourname@linux:~$ chmod a+x stegosd stegos 12yourname@linux:~$ ./stegosd --version 13Stegos Node 0.10.0 (5d9b289 2019-07-02) 14yourname@linux:~$ ./stegos --version 15Stegos CLI 0.10.0 (5d9b289 2019-07-02) If you see \u0026ldquo;undefined symbol\u0026rdquo; message or other errors - please file an issue on GitHub.\n\nYour Node has been downloaded and installed successfully.\n From Source See Building from Source page.\nInstalling on Mac Using Pre-Built binaries Download the latest version of stegosd and stegos binaries from GitHub Releases\n1curl -L https://github.com/stegos/stegos/releases/download/v0.12/stegosd- 2macos-x64 -o stegosd 3curl -L https://github.com/stegos/stegos/releases/download/v0.12/stegos-macos-x64 -o stegos 4chmod a+x stegosd stegos 5./stegosd --version 6./stegos --version The script above will download stegosd binary from "
},
{
	"uri": "/stegos-docs-hugo/getting-started/last_steps/",
	"title": "Last Steps",
	"tags": [],
	"description": "",
	"content": "Congratulations! If you have made it this far, you belong to a tiny group of people on this planet who knows how to run a blockchain node.\nPlease join us on Telegram Chat to get test tokens and let us know your thoughts. Subscribe to official Telegram Channel for the latest news.\n"
},
{
	"uri": "/stegos-docs-hugo/getting-started/quick_start/",
	"title": "Quick Start",
	"tags": [],
	"description": "",
	"content": "Use stegos/stegosDocker image to start Node: docker run -v $PWD/stegos-data:/data --name stegos_node -t -i stegos/stegos Execute stegos command inside container to get into CLI: docker exec -t -i stegos_node stegos CLI will prompt for commands: Stegos CLI 0.11.13 (e63fb9e 2019-08-09) Type \u0026#39;help\u0026#39; to get help stegos\u0026gt; Type create account to create a new account: account#1\u0026gt; create account Enter new password: Enter same password again: --- - type: account_created account_id: \u0026#34;1\u0026#34; ...\nType show keys to get your account address: account#1\u0026gt; show keys --- - type: keys_info ... --- - account_id: \u0026#34;1\u0026#34; type: keys_info account_address: 7fZZ8ED8jmiKWHdtBJ23mBoVJKKvPbBucEJL2b9eYj5579ALzEU ...\nCongratulations! Please join us on Telegram Chat to get test tokens and let us know your thoughts. Subscribe to official Telegram Channel for the latest news.\n"
},
{
	"uri": "/stegos-docs-hugo/getting-started/running_a_node/",
	"title": "Running a Node",
	"tags": [],
	"description": "",
	"content": "In this section we explain how to run Stegos Node.\nPrerequisites:\n Download and install Stegos Node.  Run Stegos Node:\n ./stegosd  ./stegosd\n docker run -v $PWD/stegos-data:/data -t -i stegos/stegos\n\n  Stegos Node will automatically create a data directory to store the blockchain and your accounts:\nINFO [stegosd] Data directory: /home/yourname/.local/share/stegos The default path to the data directory depends on your operating system:\n $HOME/.local/share/stegos  $HOME/Library/Application Support/stegos\n C:\\Users\\$USER\\AppData\\Roaming\n /data/.local/share/stegos\n\n  You can override default path to the data directory by setting STEGOS_DATA_DIR environment variable or providing\u0026ndash;data-dir command-line option.\n See Data Directory Layout page for additional information about structure of this directory.\n On the first run, the blockchain database is initialized using the genesis block for testnet network:\nINFO [stegosd] Using genesis=14427eb426e3 for \u0026#39;testnet\u0026#39; chain You can override chain by setting STEGOS_CHAIN environment variable or providing \u0026ndash;chain command line option. Supported networks:\n devnet - development (alpha) network testnet - test (beta) network mainnet - production network (soon!)   On the second and subsequent runs, Node will check the consistency of the blockchain database on the disk. This operation can take up to 5-10 minutes. Please be patient.\n1[stegosd] Using genesis=14427eb426e3 for \u0026#39;testnet\u0026#39; chain 2[stegos_blockchain::blockchain] Recovering blockchain from the disk... 3[stegos_blockchain::blockchain] Registered a macro block: epoch=0, block=14427eb426e3, inputs=[], outputs=[\u0026#34;efe2e7d9345e\u0026#34;, \u0026#34;c4a71cb7b835\u0026#34;, \u0026#34;a3ed2635fd36\u0026#34;, \u0026#34;bd36a6c800e0\u0026#34;, \u0026#34;6d40fe3a0032\u0026#34;, \u0026#34;6d9e1b1b90a0\u0026#34;, \u0026#34;ab37d6de1139\u0026#34;, \u0026#34;e93466e994ee\u0026#34;, \u0026#34;9970bfac521a\u0026#34;, \u0026#34;e5790f9a6867\u0026#34;, \u0026#34;d52afa361b21\u0026#34;, \u0026#34;13565df8dbd5\u0026#34;, \u0026#34;2cda2eee109e\u0026#34;, \u0026#34;9769fdebb0bb\u0026#34;, \u0026#34;509357d0641a\u0026#34;, \u0026#34;ca8ebc480107\u0026#34;, \u0026#34;b7e01f660353\u0026#34;, \u0026#34;32ea8bb76ffc\u0026#34;, \u0026#34;4c9308e435f4\u0026#34;, \u0026#34;ad49e09badb6\u0026#34;, \u0026#34;dd73ad6ed665\u0026#34;, \u0026#34;4ca223595e0f\u0026#34;, \u0026#34;e6ac9c730b29\u0026#34;, \u0026#34;58cbbce24c97\u0026#34;, \u0026#34;67bf703e0898\u0026#34;, \u0026#34;d9befd7ce04a\u0026#34;, \u0026#34;78012f4be696\u0026#34;, \u0026#34;d7063c1d0045\u0026#34;, \u0026#34;89a9c2f846ca\u0026#34;, \u0026#34;df7b60876366\u0026#34;, \u0026#34;3f0beb5ca4f5\u0026#34;, \u0026#34;51258f1845d1\u0026#34;, \u0026#34;afccfddc0cd5\u0026#34;] 4[stegos_blockchain::blockchain] Registered a macro block: epoch=1, block=8c34ff7da352, inputs=[], outputs=[\u0026#34;a8f300945a8a\u0026#34;, \u0026#34;9edc64443130\u0026#34;, \u0026#34;46f095ce0594\u0026#34;, \u0026#34;0cac9d0dd3d7\u0026#34;, \u0026#34;97392156e93d\u0026#34;, \u0026#34;b9c408dbd550\u0026#34;, \u0026#34;209eba3aaf3f\u0026#34;, \u0026#34;325c858befc5\u0026#34;, \u0026#34;5d4f4372c103\u0026#34;, \u0026#34;04b03bf17bc9\u0026#34;, \u0026#34;0607bdc14073\u0026#34;, \u0026#34;f21292825d84\u0026#34;, \u0026#34;9f6e4229a9f9\u0026#34;, \u0026#34;e614d8a02f7f\u0026#34;, \u0026#34;f5ca20492fbb\u0026#34;, \u0026#34;bb886be5966d\u0026#34;, \u0026#34;0cf4bb2d8c31\u0026#34;, \u0026#34;a559b615edf2\u0026#34;, \u0026#34;8ad7f6099d81\u0026#34;, \u0026#34;3dad6b04228b\u0026#34;, \u0026#34;ead1c71307e2\u0026#34;, \u0026#34;4b47b44b2fb1\u0026#34;, \u0026#34;c40831afc9b7\u0026#34;, \u0026#34;1f7a4bc9e378\u0026#34;, \u0026#34;9e9f08f64fca\u0026#34;, \u0026#34;5b8c3dbffa50\u0026#34;, \u0026#34;76ae82695b03\u0026#34;, \u0026#34;dcf7795be52d\u0026#34;, \u0026#34;2bb779ce372c\u0026#34;, \u0026#34;87b267f184d2\u0026#34;, \u0026#34;e373574277a6\u0026#34;, \u0026#34;50e60e1151b5\u0026#34;, \u0026#34;3dd502af80e9\u0026#34;, \u0026#34;b33faf0b21ef\u0026#34;, \u0026#34;b3fb1df41d76\u0026#34;, \u0026#34;ad0afdb1e95c\u0026#34;, \u0026#34;c43b37515e84\u0026#34;, \u0026#34;2c6823c292a1\u0026#34;, \u0026#34;64c158a5a5b3\u0026#34;, \u0026#34;20efaf2cb1c8\u0026#34;, \u0026#34;4ab7b2661820\u0026#34;, \u0026#34;12c7e3d3fbc2\u0026#34;, \u0026#34;845ce2965787\u0026#34;, \u0026#34;42c16d0defcd\u0026#34;, \u0026#34;b8c8c9465b84\u0026#34;, \u0026#34;de6add48034a\u0026#34;, \u0026#34;7b99ae3c76b3\u0026#34;, \u0026#34;26ee7635d1c0\u0026#34;, \u0026#34;f446aa044ce6\u0026#34;, \u0026#34;a3cdf784fe00\u0026#34;, \u0026#34;1fbb6a34fe89\u0026#34;, \u0026#34;905b46d31104\u0026#34;, \u0026#34;944ca6d65631\u0026#34;, \u0026#34;c167c69d436d\u0026#34;, \u0026#34;9a0b1fd3c2bc\u0026#34;, \u0026#34;f85b02998195\u0026#34;, \u0026#34;32dce33b0c13\u0026#34;, \u0026#34;dcd41e8ef966\u0026#34;, \u0026#34;f8e4d03537bd\u0026#34;, \u0026#34;c69fce88a5d4\u0026#34;, \u0026#34;83d7f566b524\u0026#34;] 5[stegos_blockchain::blockchain] Registered a macro block: epoch=2, block=274097597131, inputs=[\u0026#34;df7b60876366\u0026#34;], outputs=[\u0026#34;9c3940c6e076\u0026#34;, \u0026#34;01470fe655a6\u0026#34;, \u0026#34;8806f75cd82f\u0026#34;, \u0026#34;66b81b8bb919\u0026#34;, \u0026#34;af471428709e\u0026#34;, \u0026#34;a43e044d68be\u0026#34;, \u0026#34;6f343c12a4e9\u0026#34;, \u0026#34;67d5eaedf65c\u0026#34;, \u0026#34;e494ddf85ec7\u0026#34;, \u0026#34;f95f2be1f42a\u0026#34;, \u0026#34;141f73623e9e\u0026#34;, \u0026#34;b555fe2de42c\u0026#34;, \u0026#34;53928e98fd0b\u0026#34;, \u0026#34;e939bb5ef56b\u0026#34;, \u0026#34;aeace9f6e5f3\u0026#34;, \u0026#34;da74fb13a672\u0026#34;, \u0026#34;baecaffa851d\u0026#34;, \u0026#34;e57c250a77d0\u0026#34;, \u0026#34;0259b9d7cd8a\u0026#34;, \u0026#34;282e5e9c1bb5\u0026#34;, \u0026#34;372d47439e78\u0026#34;, \u0026#34;6a4fc72491f8\u0026#34;, \u0026#34;e17611610d72\u0026#34;, \u0026#34;002ce2e1f3df\u0026#34;, \u0026#34;83260c621946\u0026#34;, \u0026#34;228cad3b252d\u0026#34;, \u0026#34;c0b5df04cb7d\u0026#34;, \u0026#34;ae58feab2295\u0026#34;, \u0026#34;e7025e2eb49e\u0026#34;, \u0026#34;af46fd1978cc\u0026#34;, \u0026#34;bae56df971bd\u0026#34;, \u0026#34;db9df5c88c5c\u0026#34;, \u0026#34;24d6bb6376ce\u0026#34;, \u0026#34;383fa2cfa811\u0026#34;, \u0026#34;e181ff8520c7\u0026#34;, \u0026#34;55ccb45a998a\u0026#34;, \u0026#34;8189ae47c22e\u0026#34;, \u0026#34;d88c0e6fb5e4\u0026#34;, \u0026#34;f5e458be8d07\u0026#34;, \u0026#34;3d36f28775fe\u0026#34;, \u0026#34;69316a81c942\u0026#34;, \u0026#34;30ad978c6f31\u0026#34;, \u0026#34;3cc5ae9fbf8f\u0026#34;, \u0026#34;623c7b7dae49\u0026#34;, \u0026#34;ebe313be39cd\u0026#34;, \u0026#34;9daaa3ac1f23\u0026#34;, \u0026#34;c99b1fdcd022\u0026#34;, \u0026#34;fb99227757ce\u0026#34;, \u0026#34;f6495e60c45e\u0026#34;, \u0026#34;8d71dc0cad92\u0026#34;, \u0026#34;bc790a445345\u0026#34;, \u0026#34;22c50c2e9539\u0026#34;, \u0026#34;2556ea4535a3\u0026#34;, \u0026#34;0e5dbc3eb5d0\u0026#34;, \u0026#34;10d165e3a8f4\u0026#34;, \u0026#34;f427f3cee49a\u0026#34;, \u0026#34;3c5ad92b70fa\u0026#34;, \u0026#34;ec3ada2b9786\u0026#34;, \u0026#34;c28056a38da0\u0026#34;, \u0026#34;d75afb405c3b\u0026#34;, \u0026#34;dfb71c7eb398\u0026#34;, \u0026#34;79eb0020d601\u0026#34;, \u0026#34;21298b435832\u0026#34;] 6[stegos_blockchain::blockchain] Registered a macro block: epoch=3, block=afe9ad950976, inputs=[\u0026#34;e6ac9c730b29\u0026#34;, \u0026#34;efe2e7d9345e\u0026#34;, \u0026#34;d9befd7ce04a\u0026#34;, \u0026#34;51258f1845d1\u0026#34;, \u0026#34;dd73ad6ed665\u0026#34;, \u0026#34;c4a71cb7b835\u0026#34;, \u0026#34;e5790f9a6867\u0026#34;, \u0026#34;a3ed2635fd36\u0026#34;, \u0026#34;9970bfac521a\u0026#34;, \u0026#34;13565df8dbd5\u0026#34;, \u0026#34;4ca223595e0f\u0026#34;, \u0026#34;e93466e994ee\u0026#34;, \u0026#34;32ea8bb76ffc\u0026#34;, \u0026#34;6d40fe3a0032\u0026#34;, \u0026#34;3f0beb5ca4f5\u0026#34;, \u0026#34;67bf703e0898\u0026#34;, \u0026#34;2cda2eee109e\u0026#34;, \u0026#34;6d9e1b1b90a0\u0026#34;, \u0026#34;ab37d6de1139\u0026#34;, \u0026#34;ad49e09badb6\u0026#34;, \u0026#34;58cbbce24c97\u0026#34;, \u0026#34;9769fdebb0bb\u0026#34;, \u0026#34;bd36a6c800e0\u0026#34;, \u0026#34;ca8ebc480107\u0026#34;, \u0026#34;78012f4be696\u0026#34;, \u0026#34;afccfddc0cd5\u0026#34;, \u0026#34;509357d0641a\u0026#34;, \u0026#34;b7e01f660353\u0026#34;, \u0026#34;d7063c1d0045\u0026#34;, \u0026#34;4c9308e435f4\u0026#34;, \u0026#34;89a9c2f846ca\u0026#34;, \u0026#34;d52afa361b21\u0026#34;], outputs=[\u0026#34;301bea8310fa\u0026#34;, \u0026#34;b8c790e99d95\u0026#34;, \u0026#34;d1d6ae437e73\u0026#34;, \u0026#34;0728ea85e189\u0026#34;, \u0026#34;7803a6edd227\u0026#34;, \u0026#34;d0e0046c4eb3\u0026#34;, \u0026#34;bd146c52986e\u0026#34;, \u0026#34;f01fd098de0d\u0026#34;, \u0026#34;9e7fb4c810a4\u0026#34;, \u0026#34;fe3c936f3df8\u0026#34;, \u0026#34;be4278261f13\u0026#34;, \u0026#34;c7cfd507e5aa\u0026#34;, \u0026#34;37b49401e33d\u0026#34;, \u0026#34;2a6efca368be\u0026#34;, \u0026#34;b605703068b6\u0026#34;, \u0026#34;e368d52f5d2c\u0026#34;, \u0026#34;027a2c59642f\u0026#34;, \u0026#34;75bfa5069496\u0026#34;, \u0026#34;35e1fcc3724b\u0026#34;, \u0026#34;50e2296dfcf7\u0026#34;, \u0026#34;3c896545e656\u0026#34;, \u0026#34;973f2e0d0a54\u0026#34;, \u0026#34;c54883a0cb3d\u0026#34;, \u0026#34;f44be65bb2fb\u0026#34;, \u0026#34;ced904878a8e\u0026#34;, \u0026#34;01320612f3cf\u0026#34;, \u0026#34;07d5ea062f85\u0026#34;, \u0026#34;96ba5da7d867\u0026#34;, \u0026#34;8b61720550a6\u0026#34;, \u0026#34;b938c06c645f\u0026#34;, \u0026#34;047cd87af55e\u0026#34;, \u0026#34;4b1f8545260c\u0026#34;, \u0026#34;b0c28959fbe6\u0026#34;, \u0026#34;3c48950769e2\u0026#34;, \u0026#34;03e4fbfb5622\u0026#34;, \u0026#34;e935a278f82d\u0026#34;, \u0026#34;63dda65fac00\u0026#34;, \u0026#34;7af778726225\u0026#34;, \u0026#34;14e6a0351389\u0026#34;, \u0026#34;3bd1db2070dc\u0026#34;, \u0026#34;a189f86079b5\u0026#34;, \u0026#34;15c03c0bb956\u0026#34;, \u0026#34;9878c270bae4\u0026#34;, \u0026#34;532961ad49e5\u0026#34;, \u0026#34;fc42087cffa2\u0026#34;, \u0026#34;936abb6b7bc6\u0026#34;, \u0026#34;e8c4fcd68653\u0026#34;, \u0026#34;276e844c765a\u0026#34;, \u0026#34;a8c45a3b3110\u0026#34;, \u0026#34;00d99d457ddb\u0026#34;, \u0026#34;3765063bdf75\u0026#34;, \u0026#34;c3e20c933efb\u0026#34;, \u0026#34;db8b39163254\u0026#34;, \u0026#34;70c57bdd4941\u0026#34;, \u0026#34;82dee76e676b\u0026#34;, \u0026#34;c3ee9fd47fa7\u0026#34;, \u0026#34;a88169922017\u0026#34;, \u0026#34;89b8ecfe4e7c\u0026#34;, \u0026#34;658dbdbddbb8\u0026#34;, \u0026#34;ac13dcf56664\u0026#34;, \u0026#34;ccb8bdc3e371\u0026#34;, \u0026#34;143c257ed620\u0026#34;, \u0026#34;71739d5f2543\u0026#34;, \u0026#34;5d6405078679\u0026#34;, \u0026#34;586ae92e3877\u0026#34;, \u0026#34;e9f0caf69630\u0026#34;, \u0026#34;d35ac9cf9f46\u0026#34;, \u0026#34;3665891f804b\u0026#34;, \u0026#34;88afc847a17a\u0026#34;, \u0026#34;340ab11c8064\u0026#34;, \u0026#34;9372ed5ca2f2\u0026#34;, \u0026#34;6ab4291eab78\u0026#34;, \u0026#34;c10770d5cdad\u0026#34;, \u0026#34;5c40e979efb1\u0026#34;, \u0026#34;ae0df4519a9b\u0026#34;, \u0026#34;c29ca68aa7e2\u0026#34;, \u0026#34;ecf0365e0597\u0026#34;, \u0026#34;3dc26cb08549\u0026#34;, \u0026#34;d3360fcbc420\u0026#34;, \u0026#34;24dfbc886752\u0026#34;, \u0026#34;60c1d399f7b3\u0026#34;, \u0026#34;59c70d298aff\u0026#34;, \u0026#34;0cbcc1975da8\u0026#34;, \u0026#34;c88be76db421\u0026#34;, \u0026#34;c9a60c11f51c\u0026#34;, \u0026#34;f4672510fcff\u0026#34;, \u0026#34;de95ce00b33a\u0026#34;, \u0026#34;6918fa5c6538\u0026#34;, \u0026#34;0da55655a66b\u0026#34;, \u0026#34;9fa719012ba5\u0026#34;, \u0026#34;e0d75d4c90dd\u0026#34;, \u0026#34;73467e041581\u0026#34;, \u0026#34;0ad4bf2f1a96\u0026#34;] 7... 8[stegos_blockchain::blockchain] Recovered blockchain from the disk: epoch=3855, offset=10, last_block=e4aa224936e9 Please use different data directories for different networks, e.g. \u0026ndash;data-dir path/to/testnet for testnet, \u0026ndash;data-dir path/to/mainnet for mainnet.\n\nThe WebSocket API server will start on 3145 port:\n1INFO [stegos_api::server] Starting API Server on 127.0.0.1:3145 The network layer will try to authenticate in peer-to-peer network:\n1[stegosd] Adding node from seed pool: /ip4/52.221.197.23/tcp/10056 2[stegosd] Adding node from seed pool: /ip4/54.89.181.2/tcp/10056 3[stegosd] Adding node from seed pool: /ip4/54.254.166.86/tcp/10056 4... 5[stegos_network::libp2p_network] Network endpoints: node_id=775070b757e1, peer_id=QmVmURFbMiHpcRyGzXnkyS6NiPPv2UquZzr2muDuwdQoR1 6[stegos_network::gatekeeper::behavior] Solving a VDF puzzle: peer_id=PeerId(\u0026#34;QmXrDG958SkPrQ95ZVcwKmvh9GTLtXitqxhqmWAVhNWMZg\u0026#34;) 7[stegos_network::gatekeeper::behavior] Solved a VDF puzzle: peer_id=PeerId(\u0026#34;QmXrDG958SkPrQ95ZVcwKmvh9GTLtXitqxhqmWAVhNWMZg\u0026#34;) 8... 9INFO [stegosd] Network is ready After connecting to the network, Node will try to synchronize the blockchain database:\n1INFO [stegos_node::loader] Downloading blocks: from=481ba8e8d5d9, epoch=1, reason=\u0026#39;init\u0026#39; 2019-08-12 15:40:06 INFO [stegos_network::gatekeeper::behavior] Solving a VDF puzzle: peer_id=PeerId(\u0026#34;QmNVoa8fDUkNaZhcNqLvakaaZH8TZiyS2gLs5rdHTLeN3t\u0026#34;) 2INFO [stegos_node::loader] Received blocks: from=481ba8e8d5d9, first_epoch=1, our_epoch=1, last_epoch=50, num_blocks=50 3INFO [stegos_node::loader] Downloading blocks: from=ccea059db0a1, epoch=51, reason=\u0026#39;prefetch\u0026#39; 4INFO [stegos_blockchain::blockchain] Registered a macro block: epoch=1, block=8c34ff7da352, inputs=[], outputs=[\u0026#34;845ce2965787\u0026#34;, \u0026#34;42c16d0defcd\u0026#34;, \u0026#34;ead1c71307e2\u0026#34;, \u0026#34;1fbb6a34fe89\u0026#34;, \u0026#34;c69f 5ce88a5d4\u0026#34;, \u0026#34;a559b615edf2\u0026#34;, \u0026#34;26ee7635d1c0\u0026#34;, \u0026#34;a3cdf784fe00\u0026#34;, \u0026#34;4b47b44b2fb1\u0026#34;, \u0026#34;0cac9d0dd3d7\u0026#34;, \u0026#34;83d7f566b524\u0026#34;, \u0026#34;f21292825d84\u0026#34;, \u0026#34;3dad6b04228b\u0026#34;, \u0026#34;9a0b1fd3c2bc\u0026#34;, \u0026#34;dcf7795be52d\u0026#34;, \u0026#34;0607bdc14073\u0026#34;, \u0026#34;9e9f08f64fca\u0026#34; 6, \u0026#34;f8e4d03537bd\u0026#34;, \u0026#34;b9c408dbd550\u0026#34;, \u0026#34;76ae82695b03\u0026#34;, \u0026#34;8ad7f6099d81\u0026#34;, \u0026#34;32dce33b0c13\u0026#34;, \u0026#34;97392156e93d\u0026#34;, \u0026#34;9f6e4229a9f9\u0026#34;, \u0026#34;4ab7b2661820\u0026#34;, \u0026#34;20efaf2cb1c8\u0026#34;, \u0026#34;2c6823c292a1\u0026#34;, \u0026#34;3dd502af80e9\u0026#34;, \u0026#34;5d4f4372c103\u0026#34;, \u0026#34;f85b02 7998195\u0026#34;, \u0026#34;e614d8a02f7f\u0026#34;, \u0026#34;b33faf0b21ef\u0026#34;, \u0026#34;50e60e1151b5\u0026#34;, \u0026#34;dcd41e8ef966\u0026#34;, \u0026#34;c43b37515e84\u0026#34;, \u0026#34;f5ca20492fbb\u0026#34;, \u0026#34;0cf4bb2d8c31\u0026#34;, \u0026#34;c40831afc9b7\u0026#34;, \u0026#34;c167c69d436d\u0026#34;, \u0026#34;2bb779ce372c\u0026#34;, \u0026#34;bb886be5966d\u0026#34;, \u0026#34;b8c8c9465b84\u0026#34;, 8\u0026#34;9edc64443130\u0026#34;, \u0026#34;64c158a5a5b3\u0026#34;, \u0026#34;a8f300945a8a\u0026#34;, \u0026#34;46f095ce0594\u0026#34;, \u0026#34;f446aa044ce6\u0026#34;, \u0026#34;209eba3aaf3f\u0026#34;, \u0026#34;7b99ae3c76b3\u0026#34;, \u0026#34;325c858befc5\u0026#34;, \u0026#34;e373574277a6\u0026#34;, \u0026#34;5b8c3dbffa50\u0026#34;, \u0026#34;de6add48034a\u0026#34;, \u0026#34;87b267f184d2\u0026#34;, \u0026#34;1f7a4bc9 9e378\u0026#34;, \u0026#34;b3fb1df41d76\u0026#34;, \u0026#34;905b46d31104\u0026#34;, \u0026#34;04b03bf17bc9\u0026#34;, \u0026#34;12c7e3d3fbc2\u0026#34;, \u0026#34;ad0afdb1e95c\u0026#34;, \u0026#34;944ca6d65631\u0026#34;] 10.. 11INFO [stegos_node] Synchronized with the network: epoch=100500, last_block=8c34ff7da352\nSynchronization can take up to one day. Please be patient and wait for \u0026ldquo;Synchronized with the network\u0026rdquo; message.\nYour Node is up running.\n\n"
},
{
	"uri": "/stegos-docs-hugo/about/stg_token_and_sale/",
	"title": "STG Token and Sale",
	"tags": [],
	"description": "",
	"content": " What is Stegos\u0026rsquo; Monetary Policy? STG token emission will start at 14% during the first 4 years and halve every 4 years thereafter.\nWhen will tokens be distributed to investors? The tokens will be distributed after mainnet launch.\nWhat is your ticker name? STG\nWhat is Stegos\u0026rsquo; Total Emission? 1,000,000,000 STG\nHow will the pre-mine be distributed? The one billion pre-mined STG will be distributed as follows: Sale (51.25%); Development (16.75%); Team (10%); Marketing \u0026amp; Ecosystem (10%); Advisers (2%); Reserve (10%)\nHow many STG tokens are for sale? 51.25% (512,500,000 STG) of the total pre-mined tokens are available for sale during the various rounds.\nWhat\u0026rsquo;s the process for creating a wallet and receiving tokens purchased at sale? This is still under consideration. We will advise once we have the desktop wallet app ready.\n"
},
{
	"uri": "/stegos-docs-hugo/about/stegos_app/",
	"title": "Stegos App",
	"tags": [],
	"description": "",
	"content": " What features will the Stegos App have? In addition to an integrated STG wallet, the app will include many features, including private chat, mobile node setup, red packets (hongbao) and access to the privacy app store.\nWill I be able to stake directly from the app? The Stegos app is designed to be an accessible gateway to the world of crypto and privacy. You will find full and simple in-app instructions for setting up a node so you can start earning tokens from your pocket within minutes.\nWill the Stegos app support private messaging? Yes. Private communication integrated within the Stegos app. Messages will be sent as zero-value transactions via the Stegos blockchain and pruned from the chain once the messages are confirmed as read. Users can send a QR code via private chat to initiate an STG transaction. It is also possible to create chat groups and invite people to chats via QR codes\nWhere can I find other Stegos privacy apps? In addition to the main Stegos app, the Stegos privacy ecosystem is designed to encourage the development of other apps which focus on privacy and use the Stegos platform as a base. To help users find Stegos will have an on-chain privacy app store.\nHow will the app store work? How will I know apps are safe and private? Stegos privacy apps will be stored off-chain to keep Stegos compact. However, each privacy app must create an on-chain manifest which includes a description of the app, tags and keywords to aid searching, the URL used to download it and a hash of the app bundle.\nThe app bundles are signed with the developers’ public key, which allows users to leave on-chain app reviews to rank individual apps and developers.\nWhat are red packets? How do they work? Red packets (hongbao) are a way to send surprise gifts or payments to individuals and groups. Users decide how many tokens they want to add to a red packet and how many random gifts they want to distribute. (This number can be set to 1 to make a one-off payment.)\nPrivate red packets can be sent to an individual or group via private Stegos chat or public red packets can be created to distribute a tokens among anyone who has access to the QR code.\nUsers who try to open a public red packet via the QR code will randomly receive one (or none) of the prizes inside. Users can keep trying to open the red packet (with a slight delay) until it is empty or expires.\n"
},
{
	"uri": "/stegos-docs-hugo/about/privacy_blockchain/",
	"title": "Stegos Privacy Blockchain",
	"tags": [],
	"description": "",
	"content": " How can I be sure that STG transactions are unlinkable, untraceable, and completely confidential? Stegos uses multiple methods to ensure maximum privacy. User identities are obfuscated using cryptographic key pairs, and each transaction uses a new stealth address. Transactions are combined into supertransactions to hide sender and receiver information, while all transaction amounts are hidden using cryptographic commitments (Pedersen commitments) and zero-knowledge range proofs (Bulletproofs). Validator stakes and transaction fees are the only exception since these must be visible for blockchain validation to work. However, users can create as many wallets as they choose, so validation and staking can be performed separately and privately.\nHow does the Stegos blockchaWhat is Stegos? The Stegos privacy platform provides users with fully private transactions, messaging and data transmission. Stegos acts as a gateway to an entire ecosystem of privacy services and apps. Stegos combines a unique blockchain and token design to implement the first cryptocurrency that’s absolutely private, secure, efficient and fully mobile compatible. The most up to date information can be found in the Project section of our website at http://stegos.com.\nWho is building Stegos? The Stegos team doesn\u0026rsquo;t just bring blockchain experience to the table (although we have plenty of that, too). With backgrounds in finance, aerospace, and cryptography, the team has a breadth of experience in applying technology to some of the most sensitive challenges facing society. Want to know more about the team? Check them out here: https://github.com/stegos/stegos/wiki/Whitepaper-EN#team\nHow can Stegos send messages and data via the blockchain? Unlike other blockchains, Stegos is regularly pruned to keep it small. This means the Stegos blockchain has space for messages and data, in addition to standard transactions.\nHow can Stegos work on mobile? Stegos is optimized for use on mobile. The Stegos chain is compact, and we use a version of Proof-of-stake to secure it, which makes it viable to run full nodes on your phone and earn STG tokens from your pocket.\nWill there be an app? Yes, there will be a primary Stegos app which serves as a user-friendly gateway to the Stegos privacy ecosystem. See the Stegos App section below for more details and questions.in scale? Stegos is designed with users in mind and optimized for mobile. Therefore, it is essential for the blockchain to remain small and efficient. This is done using transactional sharding and block pruning: spent coins and expired data are safely and securely removed from the blockchain.\nWhat consensus mechanism does the Stegos privacy blockchain use? The Stegos privacy blockchain uses a version of Albatross which has been optimized for privacy and mobile compatibility. Stegos block rewards are distributed using gamified Proof-of-stake (gPoS), a unique modification to Proof-of-stake which ensures that all users have a fair chance to earn tokens for maintaining and validating the network, not just whales.\nHow does gPoS work? In addition to regular staking, gPoS adds a validator sevice award, a randomly distributed award which will be distributed to a single user who has helped to maintain the Stegos blockchain in the most recent award cycle.\nHow is the validator service award funded? One-third of the block reward from each newly created block is added to the award pool.\nHow much is the validator service award? The validator service award grows with each block until it is randomly triggered to be distributed to a single eligible user. The current size of the validator service award will be displayed on the Stegos website and in the Stegos app.\nHow often is the validator service award distributed? In order to keep the award exciting and to prevent manipulation, the award is distributed to a random user at a random time, with the likelihood of the award being released increasing as the award pool grows. On average, however, we expect the award to be allocated every few thousand blocks. This ensures that all active users have an extremely high chance of being selected to help validate the blockchain by the time the award is triggered.\nHow can you guarantee that the validator service award is random? Many features of Stegos require randomness to work. This randomness is ensured via verifiably unbiased distributed randomness, ensuring that no-one can predict or manipulate the result.\n"
},
{
	"uri": "/stegos-docs-hugo/about/privacy/",
	"title": "Stegos Privacy Platform",
	"tags": [],
	"description": "",
	"content": " What is Stegos? The Stegos privacy platform provides users with fully private transactions, messaging and data transmission. Stegos acts as a gateway to an entire ecosystem of privacy services and apps. Stegos combines a unique blockchain and token design to implement the first cryptocurrency that’s absolutely private, secure, efficient and fully mobile compatible. The most up to date information can be found in the Project section of our website at http://stegos.com.\nWho is building Stegos? The Stegos team doesn\u0026rsquo;t just bring blockchain experience to the table (although we have plenty of that, too). With backgrounds in finance, aerospace, and cryptography, the team has a breadth of experience in applying technology to some of the most sensitive challenges facing society. Want to know more about the team? Check them out here: https://github.com/stegos/stegos/wiki/Whitepaper-EN#team\nHow can Stegos send messages and data via the blockchain? Unlike other blockchains, Stegos is regularly pruned to keep it small. This means the Stegos blockchain has space for messages and data, in addition to standard transactions.\nHow can Stegos work on mobile? Stegos is optimized for use on mobile. The Stegos chain is compact, and we use a version of Proof-of-stake to secure it, which makes it viable to run full nodes on your phone and earn STG tokens from your pocket.\nWill there be an app? Yes, there will be a primary Stegos app which serves as a user-friendly gateway to the Stegos privacy ecosystem. See the Stegos App section below for more details and questions.\n"
},
{
	"uri": "/stegos-docs-hugo/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/stegos-docs-hugo/for-developers/websocket_api/",
	"title": "WebSocket API",
	"tags": [],
	"description": "",
	"content": " Stegos Node offers experimental asynchronous WebSocket API. This API allow you to manage accounts, create and track transactions, receive notifications and so on.\n Prerequisites Protocol  Framing Payload Remote Procedure Calls Notifications  Wallet RPC API  List Accounts Create Account Delete Account Getting Recovery Phrase Recover Account Unseal Account Seal Account Account Information Change Password Account Information Balance Information UTXO Information Payment Cloak Stake Unstake Restake Validate Certificate Payment History  Wallet Notifications  Balance Changed Tokens Received Tokens Spent Tokens Staked Tokens Unstaked Transaction Status Snowball Status  Node RPC API  Escrow Information Election Information Enable Restaking Pop Block  Node Notifications  Synchronization Status Changed New Micro Block Rollback Micro Block New Macro Block  Use Cases  Transaction Tracking   Prerequisites  Node is up and running Any WebSocket client library or a browser.  By default, Node starts WebSocket API server on ws://127.0.0.1:3144/ . You can override this value by providing --api-endpoint command-line option to Node or by setting STEGOS_API_ENDPOINT environment variable.\nTo communicate with Node, you will need 128-bit API TOKEN generated by Node on the first run. By default, this file is stored in Node data directory:\n $HOME/.local/share/stegos/api.token  $HOME/Library/Application Support/stegos/api.token\n C:\\Users\\$USER\\AppData\\Roaming\\api.token\n /data/api.token`\n\n  Protocol Framing API uses Text WebSocket frames. Binary frames are no currently supported.\nEach Text frame contains a Base64-encoded version of AES-128 encrypted JSON payload. This design decision was dictated by the limitations of Rust\u0026rsquo;s WebSocket technology. We plan to switch to SSL/TLS in the future.\nEncoding:\npayload = aes128_decode(base64_decode(websocket_text_message), API_TOKEN)  Decoding:\nwebsocket_text_message = base64_encode(aes128_encode(payload), API_TOKEN)  Here is basic example how to encode/decode AES messages:\n 1import base64 2import binascii 3import json 4import sys 5 6from Crypto.Cipher import AES 7from Crypto.Util import Counter 8from Crypto import Random 9 10def encrypt(key, plaintext): 11 assert len(key) == 16 12 13 # Choose a random, 16-byte IV. 14 iv = Random.new().read(AES.block_size) 15 16 # Convert the IV to a Python integer. 17 iv_int = int(binascii.hexlify(iv), 16) 18 19 # Create a new Counter object with IV = iv_int. 20 ctr = Counter.new(AES.block_size * 8, initial_value=iv_int) 21 22 # Create AES-CTR cipher. 23 aes = AES.new(key, AES.MODE_CTR, counter=ctr) 24 25 # Encrypt and return IV and ciphertext. 26 ciphertext = aes.encrypt(plaintext) 27 return iv+ciphertext 28 29def decrypt(key, ciphertext): 30 assert len(key) == 16 31 32 # Convert the IV to a Python integer. 33 iv_int = int(binascii.hexlify(ciphertext[:16]), 16) 34 35 # Create a new Counter object with IV = iv_int. 36 ctr = Counter.new(AES.block_size * 8, initial_value=iv_int) 37 38 # Create AES-CTR cipher. 39 aes = AES.new(key, AES.MODE_CTR, counter=ctr) 40 41 # Decrypt and return the plaintext. 42 plaintext = aes.decrypt(ciphertext[16:]) 43 return plaintext  1use crypto::aes::{self, KeySize}; 2use crypto::symmetriccipher::SynchronousStreamCipher; 3use std::iter::repeat; 4 5pub fn encrypt(key: [u8; 16], plaintext: \u0026amp;[u8]) -\u0026gt; Vec\u0026lt;u8\u0026gt; { 6 let mut gen = thread_rng(); 7 let mut nonce: Vec\u0026lt;u8\u0026gt; = repeat(0u8).take(16).collect(); 8 gen.fill_bytes(\u0026amp;mut nonce[..]); 9 let mut cipher = aes::ctr(KeySize::KeySize128, \u0026amp;key.0[..], \u0026amp;nonce); 10 let mut output: Vec\u0026lt;u8\u0026gt; = repeat(0u8).take(16 + plaintext.len()).collect(); 11 output[..16].copy_from_slice(\u0026amp;nonce[..]); 12 cipher.process(\u0026amp;plaintext, \u0026amp;mut output[16..]); 13 output 14} 15 16pub fn decrypt(key: [u8; 16], ciphertext: \u0026amp;[u8]) -\u0026gt; Vec\u0026lt;u8\u0026gt; { 17 let mut iv: Vec\u0026lt;u8\u0026gt; = repeat(0u8).take(16).collect(); 18 iv[..].copy_from_slice(\u0026amp;ciphertext[..16]); 19 let mut cipher = aes::ctr(KeySize::KeySize128, \u0026amp;key.0[..], \u0026amp;iv); 20 let mut output: Vec\u0026lt;u8\u0026gt; = repeat(0u8).take(ciphertext.len() - 16).collect(); 21 cipher.process(\u0026amp;ciphertext[16..], \u0026amp;mut output); 22 output 23}\n\n  Payload Payload is just a pure JSON:\n1{ 2 \u0026#34;id\u0026#34;: 100500, 3 \u0026#34;type\u0026#34;: \u0026#34;balance_info\u0026#34;, 4 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 5 \u0026#34;balance\u0026#34;: 999996000 6} There are two kinds of JSON messages:\n Remote Procedure Calls (RPC) from a client to the server. Out-of-band notifications from the server to a client.  Remote Procedure Calls Remote procedure calls are similar to JSON-RPC:\nSample request:\n1{ 2 \u0026#34;id\u0026#34;:2, 3 \u0026#34;type\u0026#34;:\u0026#34;balance_info\u0026#34; 4 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 5} Sample response:\n1{ 2 \u0026#34;id\u0026#34;:2, 3 \u0026#34;type\u0026#34;:\u0026#34;balance_info\u0026#34;, 4 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 5 \u0026#34;balance\u0026#34;:999996000 6} The protocol supports multiplexing. Client library can send multiple requests at once on the same connection and receive responses back in any order. Please note, that responses are sent as soon as they are ready. Never rely on the order of responses and use id field for tracking! Optional field id can be used to map responses to requests. This field is opaque, i.e.your client library can generate some arbitrary id for each request and server will include provided value to a reply.\nField type is a discriminator of requests and responses as well as notifications (see below). A value of type in a request doesn\u0026rsquo;t necessary matches the value of type field in a response. Some requests may return different types of responses. For example, any RPC request can end up with an error:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;error\u0026#34;, 3 \u0026#34;error\u0026#34;: \u0026#34;Not enough money.\u0026#34; 4} Notifications Out-of-band notifications are sent by server to notify a client about some events, e.g.when block has been added or accounts\u0026rsquo;s balance has changed:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;balance_changed\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4 \u0026#34;balance\u0026#34;: 999996010 5} Notifications never have id field. For synchronous client library, you can filter out or notification based on type or presence of id fields.\nWallet RPC API Wallet RPC API is used to manage account and sending transactions.\nOne Node has exactly one Wallet. One Wallet can hold multiple Accounts. One Account has exactly one Address.Address is Base58-encoded public key of an Account:\n1MAGIC_BYTE = 198 2address = base58_check_encode(MAGIC_BYTE, curve25519_public_key) 3 Each Account is uniquely identified its address. Since public keys are quite large, Wallet automatically assigns a short unique surrogate identifier to each keypair to use in API calls. This identifier is called by account_id . Please do not confuse with account_pkey which is an account public key.\nEach Account has associated password. This password is used as a seed for a key derivation function for AES-128 encryption. Encryption protects a secret key and other sensitive data. Since this password is never stored in any way, there are no possible technical ways to recover it from the node. This obviously doesn\u0026rsquo;t protect from possible leaks via side-channels or via Rubber-hose cryptanalysis.\nEach Account can be recovered using 24-word Recovery Phrase. This recovery phrase is a mnemonic representation of raw account\u0026rsquo;s secret key. Since this 24-word recovery phrase is just another representation of raw Curve25519 secret key, no password is needed to recover from it.\nAccounts have concept of Sealing/Unsealing:\n Sealed account doesn\u0026rsquo;t store sensitive information in the memory, such as secret key, balance, history and other.Sealed account can\u0026rsquo;t create transaction and spent your money. Since secret key is not loaded, Sealed account also doesn\u0026rsquo;t receive notifications about incoming payments. Unsealed account has secret key loaded into the memory.Unsealed account can create transactions, receive notification about incoming payments and perform other actions. In order to unseal account, a password is needed. Currently account is not Sealed automatically by a timeout, but this feature may be added in the future.  List Accounts Returns a list of account.\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;accounts_info\u0026#34;, 3} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;accounts_info\u0026#34;, 3 \u0026#34;accounts\u0026#34;: { 4 5 \u0026#34;1\u0026#34;: { 6 \u0026#34;account_pkey\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 7 } 8 9 10 } 11} Create Account Creates a new account.\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;create_account\u0026#34;, 3 \u0026#34;password\u0026#34;: \u0026#34;plain-text-password\u0026#34; 4} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;account_created\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34; 4} Delete Account Request:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;delete_account\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;2\u0026#34; 4} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;account_deleted\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;2\u0026#34; 4} Get Recovery Phrase Returns 24-word recovery phrase.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;recovery_info\u0026#34; 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;recovery\u0026#34;, 4 \u0026#34;recovery\u0026#34;: \u0026#34;swear praise ginger oxygen anchor ten small planet crime cave fold chuckle foot dragon decorate guess poverty grass crew depend define twice mother update\u0026#34; 5} Recover Account Recovers an account from 24-word recovery phrase:\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;recover_account\u0026#34; 3 \u0026#34;recovery\u0026#34;: \u0026#34;swear praise ginger oxygen anchor ten small planet crime cave fold chuckle foot dragon decorate guess poverty grass crew depend define twice mother update\u0026#34;, 4} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;account_created\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;2\u0026#34; 4} Unseal Account Unseals an account, i.e.loads a secret key to the memory.\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;unseal\u0026#34; 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4 \u0026#34;password\u0026#34;: \u0026#34;plain-text-password\u0026#34; 5} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;unsealed\u0026#34; 4} Seal Account Seals an account, i.e., removes an account\u0026rsquo;s secret key from memory.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;seal\u0026#34; 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;sealed\u0026#34; 4} Change Password Re-encrypts an account\u0026rsquo;s sensitive data using a new password.\nMust be unsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;change_password\u0026#34;, 3 \u0026#34;new_password\u0026#34;: \u0026#34;plain-text-password\u0026#34;, 4} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;password_changed\u0026#34; 4} Account Information Returns information about account\u0026rsquo;s public key (address).\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;account_info\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;account_info\u0026#34;, 4 \u0026#34;account_pkey\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 5} Balance Information Returns information about current and availabe account\u0026rsquo;s balances.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;balance_info\u0026#34; 3} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;balance_info\u0026#34;, 4 \u0026#34;balance\u0026#34;: 0, 5 \u0026#34;available_balance\u0026#34;: 0 6} available_balance doesn\u0026rsquo;t include tokens used by pending transactions, locked-by-timestamp UTXO, stakes and Service Awards payouts.\nUTXO Information Returns information about account\u0026rsquo;s UTXO.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;request\u0026#34;: \u0026#34;unspent_info\u0026#34; 3} Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;unspent_info\u0026#34;, 4 \u0026#34;public_payments\u0026#34;: [], 5 \u0026#34;payments\u0026#34;: [ 6 7 { 8 \u0026#34;utxo\u0026#34;: \u0026#34;13257da5cdef20d47dba473deb182f0d24c2a1ed717ba379c2b1830fdfadbd7e\u0026#34;, 9 \u0026#34;amount\u0026#34;: 1000000000, 10 \u0026#34;comment\u0026#34;: \u0026#34;Gift from Stegos Leprechaun\u0026#34;, 11 \u0026#34;locked_timestamp\u0026#34;: null, 12 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 13 \u0026#34;is_change\u0026#34;: false 14 } 15 16 17 ], 18 \u0026#34;stakes\u0026#34;: [] 19} Payment Creates a payment transaction to transfer money.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;payment\u0026#34;, 3 \u0026#34;recipient\u0026#34;: \u0026#34;7eiszB5iVFPCAWSmmkQ5ARyiLpvf1hifQrJ8FikJ1QJQ1k8WrQv\u0026#34;, 4 \u0026#34;amount\u0026#34;: 100, 5 \u0026#34;payment_fee\u0026#34;: 1000, 6 \u0026#34;comment\u0026#34;: \u0026#34;Test\u0026#34;, 7 \u0026#34;locked_timestamp\u0026#34;: \u0026#34;2019-08-22T12:35:06.343300856Z\u0026#34;, 8 \u0026#34;with_certificate\u0026#34;: false 9}  type  payment - cloaked outputs, but without using Snowball. secure_payment - cloaked outputs + Snowball (recommended). public_payment - Public (uncloaked) outputs.  recipient - recipient\u0026rsquo;s address. amount - amount in μSTG. payment_fee - desired fee per created UTXO. comment - a commentary, up to 880 chars. locked_timestamp - lock created UTXO until specified time. with_certificate - generate a proof of payment.  Response:\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;transaction_created\u0026#34;, 4 \u0026#34;tx_hash\u0026#34;: \u0026#34;b9132147148715da31d9ac95ec1efee9aec374deb356b3fedefc17322c3b63c2\u0026#34;, 5 \u0026#34;fee\u0026#34;: 2000, 6 \u0026#34;outputs\u0026#34;: [ 7 8 { 9 \u0026#34;output_type\u0026#34;: \u0026#34;payment\u0026#34;, 10 \u0026#34;utxo\u0026#34;: \u0026#34;32cbfd8cd697bef256b78a36847269a0d39c738da3cc474f3635c21b03de1310\u0026#34;, 11 \u0026#34;amount\u0026#34;: 100, 12 \u0026#34;comment\u0026#34;: \u0026#34;Test\u0026#34;, 13 \u0026#34;locked_timestamp\u0026#34;: \u0026#34;2019-08-22T12:35:06.343300856Z\u0026#34;, 14 \u0026#34;recipient\u0026#34;: \u0026#34;7eiszB5iVFPCAWSmmkQ5ARyiLpvf1hifQrJ8FikJ1QJQ1k8WrQv\u0026#34;, 15 \u0026#34;rvalue\u0026#34;: \u0026#34;0dbb132afbfdcc7bfb25191f89007f27919fceaceea03b015d98458cba1a4200\u0026#34;, 16 \u0026#34;is_change\u0026#34;: false 17 }, 18 { 19 \u0026#34;output_type\u0026#34;: \u0026#34;payment\u0026#34;, 20 \u0026#34;utxo\u0026#34;: \u0026#34;fb7b7d39265ae69cc33fe5f327a78d0ea01a508ff99265f0a92ab5fc7df9e3c6\u0026#34;, 21 \u0026#34;amount\u0026#34;: 999997900, 22 \u0026#34;comment\u0026#34;: \u0026#34;Change\u0026#34;, 23 \u0026#34;locked_timestamp\u0026#34;: null, 24 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 25 \u0026#34;is_change\u0026#34;: true 26 } 27 28 29 ], 30 \u0026#34;inputs\u0026#34;: [ 31 32 \u0026#34;13257da5cdef20d47dba473deb182f0d24c2a1ed717ba379c2b1830fdfadbd7e\u0026#34; 33 34 35 ], 36 \u0026#34;status\u0026#34;: \u0026#34;created\u0026#34; 37}  tx_hash - a hash of created transaction. fee - the total fee for all outputs. output_type :  payment public_payment stake (see Stake)  amount - amount in μSTG. comment - a commentary. rvalue - saved encryption key (only if with_certificate). locked_timestamp - the UTXO is locked until this timestamp. is_change - the UTXO is a change status - transaction status:  create accepted - accepted into the local mempool. rejected - rejected by the local mempool. prepared - added to the blockchain. committed - finalized by the consensus. conflicted - rejected because of conflict with another TX.   Cloak Exchange all uncloaked tokens to cloaked tokens.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;cloak_all\u0026#34;, 3 \u0026#34;payment_fee\u0026#34;: 1000 4} Response:\nSee Payment.\nStake Stake token into the escrow to become an validator.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;stake\u0026#34;, 3 \u0026#34;amount\u0026#34;: 2000, 4 \u0026#34;payment_fee\u0026#34;: 1000 5} Response:\nSee Payment.\nUnstake Unstake tokens from the escrow.\nUnsealed: yes\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;unstake\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4 \u0026#34;amount\u0026#34;: 2000, 5 \u0026#34;payment_fee\u0026#34;: 1000 6} 1{ 2 \u0026#34;type\u0026#34;: \u0026#34;unstake_all\u0026#34;, 3 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 4} Response:\nSee Payment.\nRestake Forcefully re-stake (refresh) expering tokens in the escrow. Usually this operation is performed automatically by *Node8.\nUnsealed: no, secret key is not needed for this operation.\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;restake_all\u0026#34;, 3} Response:\nSee Payment.\nValidate Certificate Validate a payment certificate for a payment. This API is doesn\u0026rsquo;t require existing account.\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;validate_certificate\u0026#34;, 3 \u0026#34;utxo\u0026#34;: \u0026#34;0fdb42aa9433bc6f7079426ebbe0d5464ca713b2aad2bb5ff4fe163f98a80674\u0026#34;, 4 \u0026#34;spender\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 5 \u0026#34;recipient\u0026#34;: \u0026#34;7eiszB5iVFPCAWSmmkQ5ARyiLpvf1hifQrJ8FikJ1QJQ1k8WrQv\u0026#34;, 6 \u0026#34;rvalue\u0026#34;: \u0026#34;0dbb132afbfdcc7bfb25191f89007f27919fceaceea03b015d98458cba1a4200\u0026#34; 7}  rvalue - UTXO encryption key, created by payment call when called with with_certificate option. See Payment for details.  Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;certificate_valid\u0026#34;, 3 \u0026#34;epoch\u0026#34;: 1181, 4 \u0026#34;block_hash\u0026#34;: \u0026#34;5e8a4429338ac775b40472d0cee6a439cbf0542c966bca9a089f1a84bdb2e680\u0026#34;, 5 \u0026#34;is_final\u0026#34;: true, 6 \u0026#34;timestamp\u0026#34;: \u0026#34;2019-08-21T13:05:53.045364692Z\u0026#34;, 7 \u0026#34;amount\u0026#34;: 100 8}  epoch - an epoch number when this UTXO was added to the blockchain. block_hash - a hash of the block. is_final - this block has been finalized. timestamp - a timestamp from the block. amount - decrypted amount.  Payment History Validate a payment certificate for a payment. This API is doesn\u0026rsquo;t require existing account.\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;history_info\u0026#34;, 3 \u0026#34;starting_from\u0026#34;: \u0026#34;2019-08-20T13:48:40.877231494Z\u0026#34;, 4 \u0026#34;limit\u0026#34;: 50 5} Response:\n1{ [31/9149] 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;history_info\u0026#34;, 4 \u0026#34;log\u0026#34;: [ 5 6 { 7 \u0026#34;type\u0026#34;: \u0026#34;outgoing\u0026#34;, 8 \u0026#34;timestamp\u0026#34;: \u0026#34;2019-08-21T13:36:29.038362377Z\u0026#34;, 9 \u0026#34;tx_hash\u0026#34;: \u0026#34;e2b3b05056dc216ed514422b4b08d2b7107947fdddbfb419faa87caa10400404\u0026#34;, 10 \u0026#34;fee\u0026#34;: 6000, 11 \u0026#34;outputs\u0026#34;: [ 12 { 13 \u0026#34;output_type\u0026#34;: \u0026#34;payment\u0026#34;, 14 \u0026#34;utxo\u0026#34;: \u0026#34;17a23f878dfecd0bdbd9bfd3524b829a95eb2d6a121f4f9d08160aa3b7da789a\u0026#34;, 15 \u0026#34;amount\u0026#34;: 1, 16 \u0026#34;comment\u0026#34;: \u0026#34;\u0026#34;, 17 \u0026#34;locked_timestamp\u0026#34;: null, 18 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 19 \u0026#34;is_change\u0026#34;: false 20 }, 21 { 22 \u0026#34;output_type\u0026#34;: \u0026#34;payment\u0026#34;, 23 \u0026#34;utxo\u0026#34;: \u0026#34;2ddb5b4b52ff2f54341c2f03e18e053843e964e86a4d48abb65f80c2ad09231d\u0026#34;, 24 \u0026#34;amount\u0026#34;: 999986699, 25 \u0026#34;comment\u0026#34;: \u0026#34;Change\u0026#34;, 26 \u0026#34;locked_timestamp\u0026#34;: null, 27 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 28 \u0026#34;is_change\u0026#34;: true 29 } 30 ], 31 \u0026#34;inputs\u0026#34;: [ [2/9149] 32 \u0026#34;5f8778d614aa6264269f62b5edb18f983e8da12b045b0cb314619456b930981e\u0026#34;, 33 \u0026#34;cc2a9b0268a36409a65166e4063abb88b4fe541e0c4a79eae4b66a3990a94868\u0026#34;, 34 \u0026#34;cef3b6ca7aa04383ee20c95b9c0071d751fa6b19e6ca75760e86380d402ed597\u0026#34;, 35 \u0026#34;ab55e0f121b3e3eff5c12f436abf3d1238171d86b3bd107f2ced160562dd1829\u0026#34;, 36 \u0026#34;0274559883bcf3668ec6751392633524854010267be6fcfc9a10c3c0d5cc4751\u0026#34;, 37 \u0026#34;d817af24a0344596c95f5c34d4afe4fe1fa2e184283267313ac878c1f912e90f\u0026#34; 38 ], 39 \u0026#34;status\u0026#34;: \u0026#34;committed\u0026#34;, 40 \u0026#34;epoch\u0026#34;: 1213 41 }, 42 { 43 \u0026#34;type\u0026#34;: \u0026#34;incoming\u0026#34;, 44 \u0026#34;timestamp\u0026#34;: \u0026#34;2019-08-21T13:36:30.798523887Z\u0026#34;, 45 \u0026#34;output_type\u0026#34;: \u0026#34;payment\u0026#34;, 46 \u0026#34;utxo\u0026#34;: \u0026#34;17a23f878dfecd0bdbd9bfd3524b829a95eb2d6a121f4f9d08160aa3b7da789a\u0026#34;, 47 \u0026#34;amount\u0026#34;: 1, 48 \u0026#34;comment\u0026#34;: \u0026#34;\u0026#34;, 49 \u0026#34;locked_timestamp\u0026#34;: null, 50 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 51 \u0026#34;is_change\u0026#34;: false 52 }, 53 { 54 \u0026#34;type\u0026#34;: \u0026#34;incoming\u0026#34;, 55 \u0026#34;timestamp\u0026#34;: \u0026#34;2019-08-21T13:36:30.799013899Z\u0026#34;, 56 \u0026#34;output_type\u0026#34;: \u0026#34;payment\u0026#34;, 57 \u0026#34;utxo\u0026#34;: \u0026#34;2ddb5b4b52ff2f54341c2f03e18e053843e964e86a4d48abb65f80c2ad09231d\u0026#34;, 58 \u0026#34;amount\u0026#34;: 999986699, 59 \u0026#34;comment\u0026#34;: \u0026#34;Change\u0026#34;, 60 \u0026#34;locked_timestamp\u0026#34;: null, 61 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 62 \u0026#34;is_change\u0026#34;: true 63 } 64 65 66 ] 67} Wallet Notifications Out of band notifications.\nBalance Changed Sent when an account\u0026rsquo;s balance has been changed.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;balance_changed\u0026#34;, 4 \u0026#34;balance\u0026#34;: 999988700, 5 \u0026#34;available_balance\u0026#34;: 999988700 6} Tokens Received Sent when an account has received some tokens.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;received\u0026#34;, 4 \u0026#34;utxo\u0026#34;: \u0026#34;cef3b6ca7aa04383ee20c95b9c0071d751fa6b19e6ca75760e86380d402ed597\u0026#34;, 5 \u0026#34;amount\u0026#34;: 999988699, 6 \u0026#34;comment\u0026#34;: \u0026#34;Change\u0026#34;, 7 \u0026#34;locked_timestamp\u0026#34;: null, 8 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 9 \u0026#34;is_change\u0026#34;: false 10} Tokens Spent Sent when an account has spent some tokens.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;spent\u0026#34;, 4 \u0026#34;utxo\u0026#34;: \u0026#34;8c662fb663b59dcedf60a9db59edc88cefdc36c2db50d8ce8db105fd0af58004\u0026#34;, 5 \u0026#34;amount\u0026#34;: 999990700, 6 \u0026#34;comment\u0026#34;: \u0026#34;Change\u0026#34;, 7 \u0026#34;locked_timestamp\u0026#34;: null, 8 \u0026#34;pending_timestamp\u0026#34;: \u0026#34;2019-08-21T13:21:05.168083847Z\u0026#34;, 9 \u0026#34;recipient\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 10 \u0026#34;is_change\u0026#34;: false 11} Tokens Staked Sent when an account staked some tokens into the escrow.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;staked\u0026#34;, 4 \u0026#34;utxo\u0026#34;: \u0026#34;47c1b06d67794d72d2a5538f233823d6819b7ff6f8a73ddc41a3c8bbc08b74ce\u0026#34;, 5 \u0026#34;account_pkey\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 6 \u0026#34;active_until_epoch\u0026#34;: 1194, 7 \u0026#34;is_active\u0026#34;: true, 8 \u0026#34;amount\u0026#34;: 2000 9} Tokens Unstaked Sent when an account unsteaked some tokens have from the escrow.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;unstaked\u0026#34;, 4 \u0026#34;utxo\u0026#34;: \u0026#34;8b3fdbec4c3435dee88d1a3fabb7db4cb08805bbef9ad213d8d04d483168a1d1\u0026#34;, 5 \u0026#34;account_pkey\u0026#34;: \u0026#34;7eAYuCBLQJNomPM7dHEmAp3Ku7H3wv76MdqpRBiuYdJseNwqcfw\u0026#34;, 6 \u0026#34;active_until_epoch\u0026#34;: 1191, 7 \u0026#34;is_active\u0026#34;: true, 8 \u0026#34;amount\u0026#34;: 2000 9} Transaction Status Sent when TX status has changed. See Payment.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;transaction_status\u0026#34;, 4 \u0026#34;tx_hash\u0026#34;: \u0026#34;049db1e1979f2c8d876df876011f12764fb8ef5c578203dcba35bb9a8f09cfa3\u0026#34;, 5 \u0026#34;status\u0026#34;: \u0026#34;committed\u0026#34;, 6 \u0026#34;epoch\u0026#34;: 1192 7} Snowball Status Sent when Snowball status has changed. See Payment.\n1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;snowball_status\u0026#34;, 4 \u0026#34;state\u0026#34;: \u0026#34;pool_wait\u0026#34; 5} 1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;snowball_status\u0026#34;, 4 \u0026#34;state\u0026#34;: \u0026#34;shared_keying\u0026#34; 5} 1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;snowball_status\u0026#34;, 4 \u0026#34;state\u0026#34;: \u0026#34;commitment\u0026#34; 5} 1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;snowball_status\u0026#34;, 4 \u0026#34;state\u0026#34;: \u0026#34;cloaked_vals\u0026#34; 5} 1{ 2 \u0026#34;account_id\u0026#34;: \u0026#34;1\u0026#34;, 3 \u0026#34;type\u0026#34;: \u0026#34;snowball_status\u0026#34;, 4 \u0026#34;state\u0026#34;: \u0026#34;succeeded\u0026#34; 5} Node RPC API Escrow Information Show UTXO in the escrow,\nRequest:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;escrow_info\u0026#34; 3} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;escrow_info\u0026#34;, 3 \u0026#34;validators\u0026#34;: [ 4 5 { 6 \u0026#34;network_pkey\u0026#34;: \u0026#34;c4dad2cd223433429ebd4bb25e25e447c6f1d97d9ac97336a02fe0321129224a6b30d69fe6f7c29e9af1e7328e033607a91e5d732673d4b 789bbbd38e666ddf86d99a9dc709513b5537d7e723349ecacdb1992c861dce8e49ac6fb329f703646985\u0026#34;, 10 11 \u0026#34;active_stake\u0026#34;: 100000000000, 12 \u0026#34;expired_stake\u0026#34;: 0, 13 \u0026#34;stakes\u0026#34;: [ 14 { 15 \u0026#34;utxo\u0026#34;: \u0026#34;2cc4cd0ba92efe9ee3f55fe7253ba2d8d2bbc488c3275c293ae084e30d94a58a\u0026#34;, 16 \u0026#34;account_pkey\u0026#34;: \u0026#34;7fLGYDXAwrD4miZaFwSQ5Ts6RRGmZheFAdhVNhu6wqGcXyJXLcn\u0026#34;, 17 \u0026#34;active_until_epoch\u0026#34;: 1200, 18 \u0026#34;is_active\u0026#34;: true, 19 \u0026#34;amount\u0026#34;: 100000000000 20 } 21 ] 22 }, 23 24 25 ] 26} Election Information Request:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;election_info\u0026#34; 3} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;election_info\u0026#34;, 3 \u0026#34;epoch\u0026#34;: 1199, 4 \u0026#34;offset\u0026#34;: 40, 5 \u0026#34;view_change\u0026#34;: 0, 6 \u0026#34;slots_count\u0026#34;: 1000, 7 \u0026#34;current_leader\u0026#34;: \u0026#34;ba6419bc26c8505a83222815a2c0459a43a377f9331b481c522aaa2473b0b3cd48cba7fd953b51303c45e018b17a310efce926b8ac11be8904a0ac74150ee8c503b616925a6742031668b421054aba0469e6fa223131a57a5370ac630a5091b5\u0026#34;, 8} Enable Restaking Request:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;enable_restaking\u0026#34; 3} 1{ 2 \u0026#34;type\u0026#34;: \u0026#34;restaking_enabled\u0026#34; 3} Response:\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;disable_restaking\u0026#34; 3} 1{ 2 \u0026#34;type\u0026#34;: \u0026#34;restaking_disabled\u0026#34; 3} Pop Block Pop the last unconfirmed block. For debug purposes only.\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;pop_block\u0026#34; 3} 1{ 2 \u0026#34;type\u0026#34;: \u0026#34;block_popped\u0026#34; 3} Node Notifications Synchronization Status Changed 1{ 2 \u0026#34;type\u0026#34;: \u0026#34;sync_changed\u0026#34;, 3 \u0026#34;is_synchronized\u0026#34;: true, 4 \u0026#34;epoch\u0026#34;: 1203, 5 \u0026#34;offset\u0026#34;: 32, 6 \u0026#34;view_change\u0026#34;: 0, 7 \u0026#34;last_block_hash\u0026#34;: \u0026#34;58400c4fb82d5e7f5baa34f6d23ae76f01dc1f789910aa73380f78da5f646d5e\u0026#34;, 8 \u0026#34;last_macro_block_hash\u0026#34;: \u0026#34;64e53a321c9bc160574eefec84b2961f358e449ff73efa2c6d2b47afd9681196\u0026#34;, 9 \u0026#34;last_macro_block_timestamp\u0026#34;: \u0026#34;2019-08-21T13:26:07.559157693Z\u0026#34;, 10 \u0026#34;local_timestamp\u0026#34;: \u0026#34;2019-08-21T13:26:40.984563552Z\u0026#34; 11} New Micro Block 1{ 2 \u0026#34;type\u0026#34;: \u0026#34;new_micro_block\u0026#34;, 3 \u0026#34;epoch\u0026#34;: 1203, 4 \u0026#34;offset\u0026#34;: 31, 5 \u0026#34;statuses\u0026#34;: { 6 7 \u0026#34;891cd7863bdf3775f8c95b0dbf12d33393b16186c6a55761addcb42fdb6a69de\u0026#34;: { 8 \u0026#34;status\u0026#34;: \u0026#34;prepared\u0026#34;, 9 \u0026#34;epoch\u0026#34;: 1203, 10 \u0026#34;offset\u0026#34;: 31 11 } 12 13 14 } 15} Rollback Micro Block WI"
},
{
	"uri": "/stegos-docs-hugo/getting-started/working_with_accounts/",
	"title": "Working with Accounts",
	"tags": [],
	"description": "",
	"content": " Creating an Account Type create account to create a new account. You will be asked for a password. This password is used locally to encrypt your data on the disk. Please remember it.\nType show recovery to get 24-word recovery phrase. This recovery phrase is an encoded representation of your secret key. Please write down it and keep it in a safe place. There are no other password recovery mechanisms.\nRecovering an Account Type recover account to recover an account from saved 24-word recovery phrase.\nSwitching Between Accounts Type show accounts to list available accounts.\nType use ACCOUNT_ID to switch between active accounts in CLI.\nChecking Balance Type show balance to get balance.\nSending Money Type pay RECIPIENT AMOUNT to send money.\n"
}]